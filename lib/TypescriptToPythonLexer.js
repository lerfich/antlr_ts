// Generated from grammar/TypescriptToPython.g4 by ANTLR 4.12.0
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,33,359,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,
7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,
41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,
2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,
1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,
18,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,21,1,21,1,21,1,21,1,21,3,21,206,
8,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,215,8,22,1,23,3,23,218,8,23,
1,23,4,23,221,8,23,11,23,12,23,222,1,24,3,24,226,8,24,1,24,4,24,229,8,24,
11,24,12,24,230,1,24,1,24,4,24,235,8,24,11,24,12,24,236,1,25,1,25,1,25,1,
25,1,25,1,25,1,25,1,25,1,25,3,25,248,8,25,1,26,1,26,5,26,252,8,26,10,26,
12,26,255,9,26,1,26,1,26,1,27,1,27,5,27,261,8,27,10,27,12,27,264,9,27,1,
28,4,28,267,8,28,11,28,12,28,268,1,28,1,28,1,29,3,29,274,8,29,1,29,1,29,
4,29,278,8,29,11,29,12,29,279,1,29,1,29,1,30,1,30,1,30,1,30,5,30,288,8,30,
10,30,12,30,291,9,30,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,
32,303,8,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,38,
1,38,1,38,1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,41,1,42,1,42,1,42,1,43,1,
43,1,43,1,44,1,44,1,44,1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,47,1,47,1,47,
1,48,1,48,1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,51,1,52,1,52,1,52,1,
253,0,53,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,
27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,
51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,0,69,0,71,0,73,0,75,0,
77,0,79,0,81,0,83,0,85,0,87,0,89,0,91,0,93,0,95,0,97,0,99,0,101,0,103,0,
105,0,1,0,5,1,0,48,57,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,
2,0,9,9,32,32,2,0,10,10,12,13,368,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,
7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,
0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,
1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,
0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,
0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,
63,1,0,0,0,0,65,1,0,0,0,1,107,1,0,0,0,3,116,1,0,0,0,5,118,1,0,0,0,7,120,
1,0,0,0,9,122,1,0,0,0,11,124,1,0,0,0,13,126,1,0,0,0,15,133,1,0,0,0,17,135,
1,0,0,0,19,137,1,0,0,0,21,139,1,0,0,0,23,145,1,0,0,0,25,149,1,0,0,0,27,153,
1,0,0,0,29,165,1,0,0,0,31,171,1,0,0,0,33,180,1,0,0,0,35,186,1,0,0,0,37,190,
1,0,0,0,39,193,1,0,0,0,41,198,1,0,0,0,43,205,1,0,0,0,45,214,1,0,0,0,47,217,
1,0,0,0,49,225,1,0,0,0,51,247,1,0,0,0,53,249,1,0,0,0,55,258,1,0,0,0,57,266,
1,0,0,0,59,277,1,0,0,0,61,283,1,0,0,0,63,292,1,0,0,0,65,302,1,0,0,0,67,304,
1,0,0,0,69,306,1,0,0,0,71,308,1,0,0,0,73,310,1,0,0,0,75,313,1,0,0,0,77,315,
1,0,0,0,79,318,1,0,0,0,81,320,1,0,0,0,83,323,1,0,0,0,85,326,1,0,0,0,87,329,
1,0,0,0,89,332,1,0,0,0,91,335,1,0,0,0,93,338,1,0,0,0,95,342,1,0,0,0,97,345,
1,0,0,0,99,349,1,0,0,0,101,351,1,0,0,0,103,353,1,0,0,0,105,356,1,0,0,0,107,
108,5,102,0,0,108,109,5,117,0,0,109,110,5,110,0,0,110,111,5,99,0,0,111,112,
5,116,0,0,112,113,5,105,0,0,113,114,5,111,0,0,114,115,5,110,0,0,115,2,1,
0,0,0,116,117,5,40,0,0,117,4,1,0,0,0,118,119,5,41,0,0,119,6,1,0,0,0,120,
121,5,44,0,0,121,8,1,0,0,0,122,123,5,123,0,0,123,10,1,0,0,0,124,125,5,125,
0,0,125,12,1,0,0,0,126,127,5,114,0,0,127,128,5,101,0,0,128,129,5,116,0,0,
129,130,5,117,0,0,130,131,5,114,0,0,131,132,5,110,0,0,132,14,1,0,0,0,133,
134,5,91,0,0,134,16,1,0,0,0,135,136,5,93,0,0,136,18,1,0,0,0,137,138,5,46,
0,0,138,20,1,0,0,0,139,140,5,99,0,0,140,141,5,111,0,0,141,142,5,110,0,0,
142,143,5,115,0,0,143,144,5,116,0,0,144,22,1,0,0,0,145,146,5,108,0,0,146,
147,5,101,0,0,147,148,5,116,0,0,148,24,1,0,0,0,149,150,5,110,0,0,150,151,
5,101,0,0,151,152,5,119,0,0,152,26,1,0,0,0,153,154,5,99,0,0,154,155,5,111,
0,0,155,156,5,110,0,0,156,157,5,115,0,0,157,158,5,111,0,0,158,159,5,108,
0,0,159,160,5,101,0,0,160,161,5,46,0,0,161,162,5,108,0,0,162,163,5,111,0,
0,163,164,5,103,0,0,164,28,1,0,0,0,165,166,5,98,0,0,166,167,5,114,0,0,167,
168,5,101,0,0,168,169,5,97,0,0,169,170,5,107,0,0,170,30,1,0,0,0,171,172,
5,99,0,0,172,173,5,111,0,0,173,174,5,110,0,0,174,175,5,116,0,0,175,176,5,
105,0,0,176,177,5,110,0,0,177,178,5,117,0,0,178,179,5,101,0,0,179,32,1,0,
0,0,180,181,5,119,0,0,181,182,5,104,0,0,182,183,5,105,0,0,183,184,5,108,
0,0,184,185,5,101,0,0,185,34,1,0,0,0,186,187,5,102,0,0,187,188,5,111,0,0,
188,189,5,114,0,0,189,36,1,0,0,0,190,191,5,105,0,0,191,192,5,102,0,0,192,
38,1,0,0,0,193,194,5,101,0,0,194,195,5,108,0,0,195,196,5,115,0,0,196,197,
5,101,0,0,197,40,1,0,0,0,198,199,5,61,0,0,199,42,1,0,0,0,200,206,3,81,40,
0,201,206,3,83,41,0,202,206,3,85,42,0,203,206,3,87,43,0,204,206,3,89,44,
0,205,200,1,0,0,0,205,201,1,0,0,0,205,202,1,0,0,0,205,203,1,0,0,0,205,204,
1,0,0,0,206,44,1,0,0,0,207,215,3,67,33,0,208,215,3,69,34,0,209,215,3,71,
35,0,210,215,3,73,36,0,211,215,3,75,37,0,212,215,3,77,38,0,213,215,3,79,
39,0,214,207,1,0,0,0,214,208,1,0,0,0,214,209,1,0,0,0,214,210,1,0,0,0,214,
211,1,0,0,0,214,212,1,0,0,0,214,213,1,0,0,0,215,46,1,0,0,0,216,218,5,45,
0,0,217,216,1,0,0,0,217,218,1,0,0,0,218,220,1,0,0,0,219,221,7,0,0,0,220,
219,1,0,0,0,221,222,1,0,0,0,222,220,1,0,0,0,222,223,1,0,0,0,223,48,1,0,0,
0,224,226,5,45,0,0,225,224,1,0,0,0,225,226,1,0,0,0,226,228,1,0,0,0,227,229,
7,0,0,0,228,227,1,0,0,0,229,230,1,0,0,0,230,228,1,0,0,0,230,231,1,0,0,0,
231,232,1,0,0,0,232,234,5,46,0,0,233,235,7,0,0,0,234,233,1,0,0,0,235,236,
1,0,0,0,236,234,1,0,0,0,236,237,1,0,0,0,237,50,1,0,0,0,238,239,5,116,0,0,
239,240,5,114,0,0,240,241,5,117,0,0,241,248,5,101,0,0,242,243,5,102,0,0,
243,244,5,97,0,0,244,245,5,108,0,0,245,246,5,115,0,0,246,248,5,101,0,0,247,
238,1,0,0,0,247,242,1,0,0,0,248,52,1,0,0,0,249,253,5,34,0,0,250,252,9,0,
0,0,251,250,1,0,0,0,252,255,1,0,0,0,253,254,1,0,0,0,253,251,1,0,0,0,254,
256,1,0,0,0,255,253,1,0,0,0,256,257,5,34,0,0,257,54,1,0,0,0,258,262,7,1,
0,0,259,261,7,2,0,0,260,259,1,0,0,0,261,264,1,0,0,0,262,260,1,0,0,0,262,
263,1,0,0,0,263,56,1,0,0,0,264,262,1,0,0,0,265,267,7,3,0,0,266,265,1,0,0,
0,267,268,1,0,0,0,268,266,1,0,0,0,268,269,1,0,0,0,269,270,1,0,0,0,270,271,
6,28,0,0,271,58,1,0,0,0,272,274,5,13,0,0,273,272,1,0,0,0,273,274,1,0,0,0,
274,275,1,0,0,0,275,278,5,10,0,0,276,278,5,13,0,0,277,273,1,0,0,0,277,276,
1,0,0,0,278,279,1,0,0,0,279,277,1,0,0,0,279,280,1,0,0,0,280,281,1,0,0,0,
281,282,6,29,0,0,282,60,1,0,0,0,283,284,5,47,0,0,284,285,5,47,0,0,285,289,
1,0,0,0,286,288,8,4,0,0,287,286,1,0,0,0,288,291,1,0,0,0,289,287,1,0,0,0,
289,290,1,0,0,0,290,62,1,0,0,0,291,289,1,0,0,0,292,293,5,59,0,0,293,64,1,
0,0,0,294,303,3,91,45,0,295,303,3,93,46,0,296,303,3,95,47,0,297,303,3,97,
48,0,298,303,3,99,49,0,299,303,3,101,50,0,300,303,3,103,51,0,301,303,3,105,
52,0,302,294,1,0,0,0,302,295,1,0,0,0,302,296,1,0,0,0,302,297,1,0,0,0,302,
298,1,0,0,0,302,299,1,0,0,0,302,300,1,0,0,0,302,301,1,0,0,0,303,66,1,0,0,
0,304,305,5,43,0,0,305,68,1,0,0,0,306,307,5,45,0,0,307,70,1,0,0,0,308,309,
5,42,0,0,309,72,1,0,0,0,310,311,5,42,0,0,311,312,5,42,0,0,312,74,1,0,0,0,
313,314,5,47,0,0,314,76,1,0,0,0,315,316,5,47,0,0,316,317,5,47,0,0,317,78,
1,0,0,0,318,319,5,37,0,0,319,80,1,0,0,0,320,321,5,43,0,0,321,322,5,61,0,
0,322,82,1,0,0,0,323,324,5,45,0,0,324,325,5,61,0,0,325,84,1,0,0,0,326,327,
5,42,0,0,327,328,5,61,0,0,328,86,1,0,0,0,329,330,5,47,0,0,330,331,5,61,0,
0,331,88,1,0,0,0,332,333,5,37,0,0,333,334,5,61,0,0,334,90,1,0,0,0,335,336,
5,61,0,0,336,337,5,61,0,0,337,92,1,0,0,0,338,339,5,61,0,0,339,340,5,61,0,
0,340,341,5,61,0,0,341,94,1,0,0,0,342,343,5,33,0,0,343,344,5,61,0,0,344,
96,1,0,0,0,345,346,5,33,0,0,346,347,5,61,0,0,347,348,5,61,0,0,348,98,1,0,
0,0,349,350,5,60,0,0,350,100,1,0,0,0,351,352,5,62,0,0,352,102,1,0,0,0,353,
354,5,60,0,0,354,355,5,61,0,0,355,104,1,0,0,0,356,357,5,62,0,0,357,358,5,
61,0,0,358,106,1,0,0,0,17,0,205,214,217,222,225,230,236,247,253,262,268,
273,277,279,289,302,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class TypescriptToPythonLexer extends antlr4.Lexer {

    static grammarFileName = "TypescriptToPython.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'function'", "'('", "')'", "','", "'{'", 
                         "'}'", "'return'", "'['", "']'", "'.'", "'const'", 
                         "'let'", "'new'", "'console.log'", "'break'", "'continue'", 
                         "'while'", "'for'", "'if'", "'else'", "'='", null, 
                         null, null, null, null, null, null, null, null, 
                         null, "';'" ];
	static symbolicNames = [ null, null, null, null, null, null, null, null, 
                          null, null, null, null, null, null, "CONSOLELOG", 
                          "BREAK", "CONTINUE", "WHILE", "FOR", "IF", "ELSE", 
                          "EQ", "EQOPS", "MATHOPERATION", "INT", "FLOAT", 
                          "BOOLEAN", "STRING", "WORD", "WHITESPACE", "NEWLINE", 
                          "COMMENT", "EOL", "COMPAREOPERATION" ];
	static ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                      "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", 
                      "CONSOLELOG", "BREAK", "CONTINUE", "WHILE", "FOR", 
                      "IF", "ELSE", "EQ", "EQOPS", "MATHOPERATION", "INT", 
                      "FLOAT", "BOOLEAN", "STRING", "WORD", "WHITESPACE", 
                      "NEWLINE", "COMMENT", "EOL", "COMPAREOPERATION", "PLUS", 
                      "MINUS", "MULT", "POWER", "DIV", "INTDIV", "REMAINDER", 
                      "PLUSEQ", "MINUSEQ", "MULTEQ", "DIVEQ", "REMAINDEREQ", 
                      "EQUALITY", "STREQUALITY", "INEQUALITY", "STRINEQUALITY", 
                      "LESS", "LARGER", "LESSOREQ", "MOREOREQ" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

TypescriptToPythonLexer.EOF = antlr4.Token.EOF;
TypescriptToPythonLexer.T__0 = 1;
TypescriptToPythonLexer.T__1 = 2;
TypescriptToPythonLexer.T__2 = 3;
TypescriptToPythonLexer.T__3 = 4;
TypescriptToPythonLexer.T__4 = 5;
TypescriptToPythonLexer.T__5 = 6;
TypescriptToPythonLexer.T__6 = 7;
TypescriptToPythonLexer.T__7 = 8;
TypescriptToPythonLexer.T__8 = 9;
TypescriptToPythonLexer.T__9 = 10;
TypescriptToPythonLexer.T__10 = 11;
TypescriptToPythonLexer.T__11 = 12;
TypescriptToPythonLexer.T__12 = 13;
TypescriptToPythonLexer.CONSOLELOG = 14;
TypescriptToPythonLexer.BREAK = 15;
TypescriptToPythonLexer.CONTINUE = 16;
TypescriptToPythonLexer.WHILE = 17;
TypescriptToPythonLexer.FOR = 18;
TypescriptToPythonLexer.IF = 19;
TypescriptToPythonLexer.ELSE = 20;
TypescriptToPythonLexer.EQ = 21;
TypescriptToPythonLexer.EQOPS = 22;
TypescriptToPythonLexer.MATHOPERATION = 23;
TypescriptToPythonLexer.INT = 24;
TypescriptToPythonLexer.FLOAT = 25;
TypescriptToPythonLexer.BOOLEAN = 26;
TypescriptToPythonLexer.STRING = 27;
TypescriptToPythonLexer.WORD = 28;
TypescriptToPythonLexer.WHITESPACE = 29;
TypescriptToPythonLexer.NEWLINE = 30;
TypescriptToPythonLexer.COMMENT = 31;
TypescriptToPythonLexer.EOL = 32;
TypescriptToPythonLexer.COMPAREOPERATION = 33;



